import hashlib
import pathlib
import re
import sys
import pyminizip
from PwndAPI import *
from strengthCheck import *
from wordDictAPI import *
from czechWordDictAPI import *
from pwdPattern import *


specCharInPw = False
numInPw = False
smallCharInPw = False
bigCharInPw = False
patternInPw = False
isWholeInDB = False
isInCzechDictRes = False
isInEngDict = False
isPartInDB = False
numOfPass = 0
original_stdout = sys.stdout
scanner = input("Zadej svoje heslo");

with open('outputFiles/userPass.txt', 'w') as f:
    #sys.stdout = f
    print("-------------------------------------------------------------------------------------")
    print("Anal√Ωza hesla, zda se nenach√°z√≠ cel√© heslo ƒçi jeho ƒç√°st v datab√°zi prolomen√Ωch hesel")
    print("-------------------------------------------------------------------------------------")
    if numOfPass == 0:
        numOf = findPasswd(scanner)
        with open('outputFiles/patternPass.txt', 'a') as pwdFile:
            sys.stdout = pwdFile
            print(scanner)
            sys.stdout = original_stdout
        if numOf is False:
            isWholeInDB = True
            print("‚úÖ heslo jako celek se v DB nenechazi")
        else: print("‚ùå Poƒçet v√Ωskyt≈Ø tv√©ho hesla jako celku: " + numOf)
        numOfPass = 1
    print(" ")
    if numOfPass == 1:
        res = list(re.findall('(\d+|[@_!#$%^&*()<>?/\|}{~:]|[A-Za-z]+)', scanner));
        for passwd_piece in res:
            if len(passwd_piece) >= 3:
                with open('outputFiles/patternPass.txt', 'a') as pwdFile:
                    sys.stdout = pwdFile
                    print(passwd_piece)
                    sys.stdout = original_stdout
                numOf = findPasswd(passwd_piece)
                if numOf is False: print("‚úÖ ƒå√°st hesla: " + passwd_piece + " se v DB nenech√°z√≠")
                else:
                    isPartInDB = True
                    print("‚ùå Poƒçet v√Ωskyt≈Ø ƒç√°sti tv√©ho hesla: " + passwd_piece + " je: " + numOf +
                            "  -> Doporuƒçujeme tuto ƒç√°st hesla zmƒõnit/upravit")

                isInDict = dictWord(passwd_piece)
                if isInDict is False: print("‚úÖ ƒå√°st hesla: " + passwd_piece + " se nenach√°z√≠ v anglick√©m slovn√≠ku")
                else:
                    isInEngDict = True
                    print("‚ùå ƒå√°st tv√©ho hesla: " + passwd_piece + " je slovo nach√°zej√≠c√≠ se v anglick√©m slovn√≠ku")

                isInCzechDict = czechDictWord(passwd_piece)
                if isInCzechDict is False: print("‚úÖ ƒå√°st hesla: " + passwd_piece + " se nenach√°z√≠ v ƒçesk√©m slovn√≠ku")
                else:
                    isInCzechDictRes = True
                    print("‚ùå ƒå√°st tv√©ho hesla: " + passwd_piece + " je slovo nach√°zej√≠c√≠ se v ƒçesk√©m slovn√≠ku")
                print(" ")

    print(" ")
    print("-------------------------------------------------------------------------------------")
    print("Anal√Ωza hesla na z√°kladƒõ slovn√≠ku sestaven√©ho z prolomen√Ωch hesel")
    print("-------------------------------------------------------------------------------------")
    strCheck = passStrength(scanner)
    if strCheck == 0: print('‚ùå Heslo je velmi slab√©')
    if strCheck == 1: print('üü† Heslo je st≈ôednƒõ siln√©')
    if strCheck == 2: print('‚úÖ Heslo je siln√©')

    print(" ")
    print("-------------------------------------------------------------------------------------")
    print("Anal√Ωza hesla, zda obsahuje velk√°/mal√° p√≠smena, ƒç√≠sla a speci√°ln√≠ znaky")
    print("-------------------------------------------------------------------------------------")

    regex = re.compile('[@_!#$%^&*()<>?/\|}{~:]')
    if (regex.search(scanner) == None): print('‚ùå Heslo neobsahuje speci√°ln√≠ znaky')
    else:
        specCharInPw = True
        print('‚úÖ Heslo obsahuje speci√°ln√≠ znaky')

    regex = re.compile('[a-z]')
    if (regex.search(scanner) == None): print('‚ùå Heslo neobsahuje mal√° p√≠smena')
    else:
        smallCharInPw = True
        print('‚úÖ Heslo obsahuje mal√° p√≠smena')

    regex = re.compile('[A-Z]')
    if (regex.search(scanner) == None): print('‚ùå Heslo neobsahuje velk√° p√≠smena')
    else:
        bigCharInPw = True
        print('‚úÖ Heslo obsahuje velk√° p√≠smena')

    regex = re.compile('[0-9]')
    if (regex.search(scanner) == None): print('‚ùå Heslo neobsahuje ƒç√≠sla')
    else:
        numInPw = True
        print('‚úÖ Heslo osahuje ƒç√≠sla')

    sys.stdout = original_stdout

    print(" ")
    print("-------------------------------------------------------------------------------------")
    print("Anal√Ωza hesla, zda obsahuje kl√°vesnicov√© patterny")
    print("-------------------------------------------------------------------------------------")
    isPattern = testPattern()
    for keyPattern in isPattern:
        print(keyPattern)
    totalKeyPatCount = keyPattern[-1].split()[-1]
    print(' ')
    print('Poƒçet nelezen√Ωch kl√°vesov√Ωch pattern≈Ø: ' + totalKeyPatCount)
    print('V√≠ce info k pattern≈Øm v√Ω≈°e ‚¨Ü')
    print(' ')
    if (totalKeyPatCount == 0): print('‚úÖ Heslo neobsahuje ≈æ√°dn√© kl√°vesnicov√© paterny')
    else:
        patternInPw = True
        print('‚ùå Heslo obsahuje kl√°vesnicov√© patterny')

pyminizip.compress('outputFiles/userPass.txt', None, 'outputFiles/userPass.zip', scanner, 5)

with open('outputFiles/userPass.txt', 'w') as f:
    sys.stdout = f
    print(' ')
    sys.stdout = original_stdout

with open('outputFiles/patternPass.txt', 'w') as pwdFile:
    sys.stdout = pwdFile
    print(' ')
    sys.stdout = original_stdout

print(" ")
print("-------------------------------------------------------------------------------------")
print("Doporuƒçen√≠ pro lep≈°√≠ heslo")
print("-------------------------------------------------------------------------------------")

if specCharInPw is False: print('‚ùóDoporuƒçujeme p≈ôidat do hesla speci√°ln√≠ znaky jako nap≈ô. @,#,$,_,...')
if smallCharInPw is False: print('‚ùóDoporuƒçujeme p≈ôidat do hesla mal√° p√≠smena')
if bigCharInPw is False: print('‚ùóDoporuƒçujeme p≈ôidat do hesla velk√° p√≠smena')
if numInPw is False: print('‚ùóDoporuƒçujeme p≈ôidat do hesla ƒç√≠sla')
if isWholeInDB is False: print('‚ùóHeslo jako celek se nach√°z√≠ v DB prolomen√Ωch hesel -> doporuƒçujeme zcela zmƒõnit heslo')
if isPartInDB is True: print('‚ùóƒå√°st va≈°eho hesla se nach√°z√≠ v DB prolomen√Ωch hesel -> v√≠ce informac√≠ viz. sekce v√Ω≈°e ‚¨Ü')
if isInEngDict is True: print('‚ùóƒå√°st va≈°eho hesla je slovo z anglick√©ho slovn√≠ku -> v√≠ce informac√≠ viz. sekce v√Ω≈°e ‚¨Ü')
if isInCzechDict is True: print('‚ùóƒå√°st va≈°eho hesla je slovo z ƒçesk√©ho slovn√≠ku -> v√≠ce informac√≠ viz. sekce v√Ω≈°e ‚¨Ü')
if patternInPw is True: print('‚ùóVa≈°e heslo obsahuje kl√°vesnicov√© patterny -> doporuƒçujeme kl√°v. patterny nepou≈æ√≠vat')


